"""
Test WebSocket Client
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BLE ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend Server
‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á EazyTrax
"""

import socketio
import time
import random
import json

# Configuration
SERVER_URL = 'http://localhost:5000'
AUTH_TOKEN = 'your-secret-token-here'  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô app.py

# BLE Tag ‡πÅ‡∏•‡∏∞ Gateway ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
TARGET_TAG = 'C4:D3:6A:D8:71:76'
TEST_GATEWAYS = [
    '9C:8C:D8:C7:E0:16',
    'AA:BB:CC:DD:EE:01',
    'AA:BB:CC:DD:EE:02',
    'AA:BB:CC:DD:EE:03',
    'AA:BB:CC:DD:EE:04'
]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á SocketIO client
sio = socketio.Client()

# Event handlers
@sio.on('connect')
def on_connect():
    print('‚úÖ Connected to server')
    print(f'üì° Server: {SERVER_URL}')
    print(f'üîë Token: {AUTH_TOKEN[:10]}...')
    print('-' * 60)

@sio.on('disconnect')
def on_disconnect():
    print('\n‚ùå Disconnected from server')

@sio.on('ack')
def on_ack(data):
    print(f'‚úÖ Server acknowledged: {data}')

@sio.on('error')
def on_error(data):
    print(f'‚ùå Server error: {data}')

def generate_test_data(gateway_mac):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BLE ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """
    # RSSI ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -90 ‡∏ñ‡∏∂‡∏á -40 dBm
    rssi = random.randint(-90, -40)
    
    # Distance ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å RSSI (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
    # d = 10 ^ ((TxPower - RSSI) / (10 * n))
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ TxPower = -59, n = 2
    distance = 10 ** ((-59 - rssi) / 20.0)
    
    return {
        'token': AUTH_TOKEN,
        'gateway_mac': gateway_mac,
        'tag_mac': TARGET_TAG,
        'rssi': rssi,
        'distance': round(distance, 2),
        'battery': random.randint(70, 100),
        'temperature': round(random.uniform(20, 30), 1),
        'humidity': random.randint(40, 80),
        'timestamp': time.time()
    }

def test_single_message():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    print('\nüì§ Test 1: Sending single message...')
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.connect(SERVER_URL)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_data = generate_test_data(TEST_GATEWAYS[0])
        print(f'üì® Sending: {json.dumps(test_data, indent=2)}')
        
        sio.emit('ble_data', test_data)
        
        # ‡∏£‡∏≠‡∏£‡∏±‡∏ö response
        time.sleep(2)
        
        # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.disconnect()
        
        print('‚úÖ Test 1 completed')
        
    except Exception as e:
        print(f'‚ùå Test 1 failed: {e}')

def test_multiple_messages():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    """
    print('\nüì§ Test 2: Sending multiple messages...')
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.connect(SERVER_URL)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        for i, gateway_mac in enumerate(TEST_GATEWAYS):
            test_data = generate_test_data(gateway_mac)
            print(f'üì® [{i+1}/{len(TEST_GATEWAYS)}] Gateway: {gateway_mac}, RSSI: {test_data["rssi"]} dBm, Distance: {test_data["distance"]} m')
            
            sio.emit('ble_data', test_data)
            time.sleep(0.5)  # ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        # ‡∏£‡∏≠‡∏£‡∏±‡∏ö response
        time.sleep(2)
        
        # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.disconnect()
        
        print('‚úÖ Test 2 completed')
        
    except Exception as e:
        print(f'‚ùå Test 2 failed: {e}')

def test_continuous_stream():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏à‡∏≥‡∏•‡∏≠‡∏á real-time)
    """
    print('\nüì§ Test 3: Continuous data stream...')
    print('Press Ctrl+C to stop')
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.connect(SERVER_URL)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        iteration = 0
        while True:
            iteration += 1
            
            # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gateway
            gateway_mac = random.choice(TEST_GATEWAYS)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            test_data = generate_test_data(gateway_mac)
            print(f'üì® [{iteration}] Gateway: {gateway_mac}, RSSI: {test_data["rssi"]} dBm, Distance: {test_data["distance"]} m')
            
            sio.emit('ble_data', test_data)
            
            # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            time.sleep(2)
        
    except KeyboardInterrupt:
        print('\n‚èπÔ∏è  Stopped by user')
        sio.disconnect()
        print('‚úÖ Test 3 completed')
        
    except Exception as e:
        print(f'‚ùå Test 3 failed: {e}')

def test_invalid_token():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Token ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    print('\nüì§ Test 4: Testing invalid token...')
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.connect(SERVER_URL)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Token ‡∏ú‡∏¥‡∏î
        test_data = generate_test_data(TEST_GATEWAYS[0])
        test_data['token'] = 'wrong-token-12345'
        
        print(f'üì® Sending with invalid token: {test_data["token"]}')
        
        sio.emit('ble_data', test_data)
        
        # ‡∏£‡∏≠‡∏£‡∏±‡∏ö response
        time.sleep(2)
        
        # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        sio.disconnect()
        
        print('‚úÖ Test 4 completed')
        
    except Exception as e:
        print(f'‚ùå Test 4 failed: {e}')

def main():
    """
    ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    """
    print('=' * 60)
    print('WebSocket Client Test')
    print('=' * 60)
    print(f'Server: {SERVER_URL}')
    print(f'Token: {AUTH_TOKEN}')
    print(f'Target Tag: {TARGET_TAG}')
    print(f'Test Gateways: {len(TEST_GATEWAYS)} gateways')
    print('=' * 60)
    
    while True:
        print('\nSelect test:')
        print('1. Send single message')
        print('2. Send multiple messages')
        print('3. Continuous data stream')
        print('4. Test invalid token')
        print('0. Exit')
        
        choice = input('\nEnter choice: ').strip()
        
        if choice == '1':
            test_single_message()
        elif choice == '2':
            test_multiple_messages()
        elif choice == '3':
            test_continuous_stream()
        elif choice == '4':
            test_invalid_token()
        elif choice == '0':
            print('\nüëã Goodbye!')
            break
        else:
            print('‚ùå Invalid choice')

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\n\nüëã Goodbye!')

