"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á EazyTrax
"""

import jwt
from datetime import datetime, timedelta
import sys

# Secret key (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô websocket_server.py)
SECRET_KEY = "ble-kku-secret-key-2025"

def generate_jwt_token(client_id: str = "eazytrax", expires_hours: int = 8760) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
    
    Args:
        client_id: Client identifier
        expires_hours: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà token ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (default: 1 ‡∏õ‡∏µ = 8760 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        
    Returns:
        JWT token string
    """
    payload = {
        'client_id': client_id,
        'iat': datetime.utcnow(),
        'exp': datetime.utcnow() + timedelta(hours=expires_hours)
    }
    
    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
    return token

def decode_jwt_token(token: str):
    """
    ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    Args:
        token: JWT token string
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        
        print("\n" + "=" * 60)
        print("Token Information")
        print("=" * 60)
        print(f"Client ID: {payload.get('client_id')}")
        print(f"Issued At: {datetime.fromtimestamp(payload.get('iat'))}")
        print(f"Expires At: {datetime.fromtimestamp(payload.get('exp'))}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        exp_time = datetime.fromtimestamp(payload.get('exp'))
        now = datetime.now()
        remaining = exp_time - now
        
        if remaining.total_seconds() > 0:
            days = remaining.days
            hours = remaining.seconds // 3600
            print(f"Time Remaining: {days} days, {hours} hours")
            print(f"Status: ‚úÖ Valid")
        else:
            print(f"Status: ‚ùå Expired")
        
        print("=" * 60)
        
    except jwt.ExpiredSignatureError:
        print("\n‚ùå Token has expired")
    except jwt.InvalidTokenError as e:
        print(f"\n‚ùå Invalid token: {e}")

def main():
    """
    ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    """
    print("=" * 60)
    print("JWT Token Generator")
    print("=" * 60)
    print("Secret Key:", SECRET_KEY)
    print("=" * 60)
    
    if len(sys.argv) > 1:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ argument ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ token
        if sys.argv[1] == "decode":
            if len(sys.argv) < 3:
                print("\nUsage: python generate_jwt_token.py decode <token>")
                return
            
            token = sys.argv[2]
            decode_jwt_token(token)
        else:
            print("\nUnknown command:", sys.argv[1])
            print("Available commands: decode")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà
    print("\nOptions:")
    print("1. Generate token (expires in 1 year)")
    print("2. Generate token (expires in 1 month)")
    print("3. Generate token (expires in 1 week)")
    print("4. Generate token (custom expiration)")
    print("5. Decode existing token")
    print("0. Exit")
    
    choice = input("\nEnter choice: ").strip()
    
    if choice == "1":
        token = generate_jwt_token(expires_hours=8760)  # 1 year
        print("\n" + "=" * 60)
        print("Generated JWT Token (Valid for 1 year)")
        print("=" * 60)
        print(token)
        print("=" * 60)
        print("\n‚úÖ Copy the token above and paste it in EazyTrax configuration")
        print("   Field: Access token")
        
    elif choice == "2":
        token = generate_jwt_token(expires_hours=720)  # 1 month
        print("\n" + "=" * 60)
        print("Generated JWT Token (Valid for 1 month)")
        print("=" * 60)
        print(token)
        print("=" * 60)
        print("\n‚úÖ Copy the token above and paste it in EazyTrax configuration")
        
    elif choice == "3":
        token = generate_jwt_token(expires_hours=168)  # 1 week
        print("\n" + "=" * 60)
        print("Generated JWT Token (Valid for 1 week)")
        print("=" * 60)
        print(token)
        print("=" * 60)
        print("\n‚úÖ Copy the token above and paste it in EazyTrax configuration")
        
    elif choice == "4":
        try:
            hours = int(input("Enter expiration time (hours): "))
            token = generate_jwt_token(expires_hours=hours)
            print("\n" + "=" * 60)
            print(f"Generated JWT Token (Valid for {hours} hours)")
            print("=" * 60)
            print(token)
            print("=" * 60)
            print("\n‚úÖ Copy the token above and paste it in EazyTrax configuration")
        except ValueError:
            print("\n‚ùå Invalid input")
            
    elif choice == "5":
        token = input("\nEnter JWT token to decode: ").strip()
        decode_jwt_token(token)
        
    elif choice == "0":
        print("\nüëã Goodbye!")
        
    else:
        print("\n‚ùå Invalid choice")

if __name__ == "__main__":
    main()

